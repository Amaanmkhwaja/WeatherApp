{"ast":null,"code":"import { useRef, useState, useCallback, useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar useLatest = function (val) {\n  var ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\nvar _debounce = function (fn, delay) {\n  var timer; // eslint-disable-next-line func-names\n\n  return function () {\n    var _this = this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    timer = setTimeout(function () {\n      return fn.apply(_this, args);\n    }, delay);\n  };\n};\nvar loadApiErr = \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\nvar usePlacesAutocomplete = function usePlacesAutocomplete(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    requestOptions = _ref.requestOptions,\n    _ref$debounce = _ref.debounce,\n    debounce = _ref$debounce === void 0 ? 200 : _ref$debounce,\n    _ref$cache = _ref.cache,\n    cache = _ref$cache === void 0 ? 24 * 60 * 60 : _ref$cache,\n    _ref$cacheKey = _ref.cacheKey,\n    cacheKey = _ref$cacheKey === void 0 ? \"upa\" : _ref$cacheKey,\n    googleMaps = _ref.googleMaps,\n    callbackName = _ref.callbackName,\n    _ref$defaultValue = _ref.defaultValue,\n    defaultValue = _ref$defaultValue === void 0 ? \"\" : _ref$defaultValue,\n    _ref$initOnMount = _ref.initOnMount,\n    initOnMount = _ref$initOnMount === void 0 ? true : _ref$initOnMount;\n  var _useState = useState(false),\n    ready = _useState[0],\n    setReady = _useState[1];\n  var _useState2 = useState(defaultValue),\n    value = _useState2[0],\n    setVal = _useState2[1];\n  var _useState3 = useState({\n      loading: false,\n      status: \"\",\n      data: []\n    }),\n    suggestions = _useState3[0],\n    setSuggestions = _useState3[1];\n  var asRef = useRef();\n  var requestOptionsRef = useLatest(requestOptions);\n  var googleMapsRef = useLatest(googleMaps);\n  var init = useCallback(function () {\n    var _google$maps;\n    if (asRef.current) return;\n    var _window = window,\n      google = _window.google;\n    var gMaps = googleMapsRef.current;\n    var placesLib = (gMaps == null ? void 0 : gMaps.places) || (google == null ? void 0 : (_google$maps = google.maps) == null ? void 0 : _google$maps.places);\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, [googleMapsRef]);\n  var clearSuggestions = useCallback(function () {\n    setSuggestions({\n      loading: false,\n      status: \"\",\n      data: []\n    });\n  }, []);\n  var clearCache = useCallback(function (key) {\n    if (key === void 0) {\n      key = cacheKey;\n    }\n    try {\n      sessionStorage.removeItem(key);\n    } catch (error) {// Skip exception\n    }\n  }, [cacheKey]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var fetchPredictions = useCallback(_debounce(function (val) {\n    var _asRef$current;\n    if (!val) {\n      clearSuggestions();\n      return;\n    }\n    setSuggestions(function (prevState) {\n      return _extends({}, prevState, {\n        loading: true\n      });\n    });\n    var cachedData = {};\n    try {\n      cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || \"{}\");\n    } catch (error) {// Skip exception\n    }\n    if (cache) {\n      cachedData = Object.keys(cachedData).reduce(function (acc, key) {\n        if (cachedData[key].maxAge - Date.now() >= 0) acc[key] = cachedData[key];\n        return acc;\n      }, {});\n      if (cachedData[val]) {\n        setSuggestions({\n          loading: false,\n          status: \"OK\",\n          data: cachedData[val].data\n        });\n        return;\n      }\n    }\n    (_asRef$current = asRef.current) == null ? void 0 : _asRef$current.getPlacePredictions(_extends({}, requestOptionsRef.current, {\n      input: val\n    }), function (data, status) {\n      setSuggestions({\n        loading: false,\n        status: status,\n        data: data || []\n      });\n      if (cache && status === \"OK\") {\n        cachedData[val] = {\n          data: data,\n          maxAge: Date.now() + cache * 1000\n        };\n        try {\n          sessionStorage.setItem(cacheKey, JSON.stringify(cachedData));\n        } catch (error) {// Skip exception\n        }\n      }\n    });\n  }, debounce), [cache, cacheKey, clearSuggestions, requestOptionsRef]);\n  var setValue = useCallback(function (val, shouldFetchData) {\n    if (shouldFetchData === void 0) {\n      shouldFetchData = true;\n    }\n    setVal(val);\n    if (asRef.current && shouldFetchData) fetchPredictions(val);\n  }, [fetchPredictions]);\n  useEffect(function () {\n    if (!initOnMount) return function () {\n      return null;\n    };\n    var _window2 = window,\n      google = _window2.google;\n    if (!googleMapsRef.current && !(google != null && google.maps) && callbackName) {\n      window[callbackName] = init;\n    } else {\n      init();\n    }\n    return function () {\n      // @ts-ignore\n      if (window[callbackName]) delete window[callbackName];\n    };\n  }, [callbackName, googleMapsRef, init, initOnMount]);\n  return {\n    ready: ready,\n    value: value,\n    suggestions: suggestions,\n    setValue: setValue,\n    clearSuggestions: clearSuggestions,\n    clearCache: clearCache,\n    init: init\n  };\n};\n\n/* eslint-disable compat/compat */\nvar geocodeErr = \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\nvar getGeocode = function getGeocode(args) {\n  var geocoder = new window.google.maps.Geocoder();\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n      resolve(results);\n    });\n  });\n};\nvar getLatLng = function getLatLng(result) {\n  var _result$geometry$loca = result.geometry.location,\n    lat = _result$geometry$loca.lat,\n    lng = _result$geometry$loca.lng;\n  return {\n    lat: lat(),\n    lng: lng()\n  };\n};\nvar getZipCode = function getZipCode(result, useShortName) {\n  var foundZip = result.address_components.find(function (_ref) {\n    var types = _ref.types;\n    return types.includes(\"postal_code\");\n  });\n  if (!foundZip) return undefined;\n  return useShortName ? foundZip.short_name : foundZip.long_name;\n};\nvar getDetailsErr = \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\nvar getDetails = function getDetails(args) {\n  var PlacesService = new window.google.maps.places.PlacesService(document.createElement(\"div\"));\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n  return new Promise(function (resolve, reject) {\n    PlacesService.getDetails(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\nexport { usePlacesAutocomplete as default, getDetails, getGeocode, getLatLng, getZipCode };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAGA,gBAAe,UAAIA,GAAJ,EAA6B;EAC1C,IAAMC,GAAG,GAAGC,MAAM,CAACF,GAAD,CAAlB;EACAC,GAAG,CAACE,OAAJ,GAAcH,GAAd;EACA,OAAOC,GAAP;AACD,CAJD;ACHA,gBAAe,UACbG,EADa,EAEbC,KAFa,EAGsD;EACnE,IAAIC,KAAJ,CADmE;;EAInE,OAAO,YAA8D;IAAA;IAAA,kCAArBC,IAAqB;MAArBA,IAAqB;IAAA;IACnE,IAAID,KAAK,KAAK,IAAd,EAAoB;MAClBE,YAAY,CAACF,KAAD,CAAZ;MACAA,KAAK,GAAG,IAAR;IACD;IAEDA,KAAK,GAAGG,UAAU,CAAC;MAAA,OAAML,EAAE,CAACM,KAAH,CAASC,KAAT,EAAeJ,IAAf,CAAN;KAAD,EAA6BF,KAA7B,CAAlB;GANF;AAQD,CAfD;ACwCO,IAAMO,UAAU,GACrB,uJADK;AAGP,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CASGC;EAAA,8BAAnB,EAAmB;IAR/BC,cAQ+B,QAR/BA,cAQ+B;IAAAC,qBAP/BC,QAO+B;IAP/BA,QAO+B,8BAPpB,GAOoB;IAAAC,kBAN/BC,KAM+B;IAN/BA,KAM+B,2BANvB,EAAK,KAAL,GAAU,EAMa;IAAAC,qBAL/BC,QAK+B;IAL/BA,QAK+B,8BALpB,KAKoB;IAJ/BC,UAI+B,QAJ/BA,UAI+B;IAH/BC,YAG+B,QAH/BA,YAG+B;IAAAC,yBAF/BC,YAE+B;IAF/BA,YAE+B,kCAFhB,EAEgB;IAAAC,wBAD/BC,WAC+B;IAD/BA,WAC+B,iCADjB,IACiB;EAC/B,IAA0BC,oBAAQ,CAAC,KAAD,CAAlC;IAAOC,KAAP;IAAcC,QAAd;EACA,IAAwBF,qBAAQ,CAACH,YAAD,CAAhC;IAAOM,KAAP;IAAcC,MAAd;EACA,iBAAsCJ,QAAQ,CAAc;MAC1DK,OAAO,EAAE,KADiD;MAE1DC,MAAM,EAAE,EAFkD;MAG1DC,IAAI,EAAE;IAHoD,CAAd,CAA9C;IAAOC,WAAP;IAAoBC,cAApB;EAKA,IAAMC,KAAK,GAAGpC,MAAM,EAApB;EACA,IAAMqC,iBAAiB,GAAGC,SAAS,CAACzB,cAAD,CAAnC;EACA,IAAM0B,aAAa,GAAGD,SAAS,CAAClB,UAAD,CAA/B;EAEA,IAAMoB,IAAI,GAAGC,WAAW,CAAC,YAAM;IAAA;IAC7B,IAAIL,KAAK,CAACnC,OAAV,EAAmB;IAEnB,cAAmByC,MAAnB;MAAQC,MAAR,WAAQA,MAAR;IACA,IAAiBC,KAAjB,GAA2BL,aAA3B,CAAQtC,OAAR;IACA,IAAM4C,SAAS,GAAG,MAAK,IAAL,qBAAK,CAAEC,MAAP,MAAiBH,MAAjB,oCAAiBA,MAAM,CAAEI,IAAzB,KAAiB,6BAAcD,MAA/B,CAAlB;IAEA,IAAI,CAACD,SAAL,EAAgB;MACdG,OAAO,CAACC,KAAR,CAAcvC,UAAd;MACA;IACD;IAED0B,KAAK,CAACnC,OAAN,GAAgB,IAAI4C,SAAS,CAACK,mBAAd,EAAhB;IACAtB,QAAQ,CAAC,IAAD,CAAR;EACD,CAduB,EAcrB,CAACW,aAAD,CAdqB,CAAxB;EAgBA,IAAMY,gBAAgB,GAAGV,WAAW,CAAC,YAAM;IACzCN,cAAc,CAAC;MAAEJ,OAAO,EAAE,KAAX;MAAkBC,MAAM,EAAE,EAA1B;MAA8BC,IAAI,EAAE;IAApC,CAAD,CAAd;GADkC,EAEjC,EAFiC,CAApC;EAIA,IAAMmB,UAAU,GAAGX,WAAW,CAC5B,UAACY,GAAD,EAAoB;IAAA,IAAnBA,GAAmB;MAAnBA,GAAmB,GAAblC,QAAa;IAAA;IAClB,IAAI;MACFmC,cAAc,CAACC,UAAf,CAA0BF,GAA1B;IACD,CAFD,CAEE,OAAOJ,KAAP,EAAc;IAAA;EAGjB,CAP2B,EAQ5B,CAAC9B,QAAD,CAR4B,CAA9B,CAhC+B;;EA4C/B,IAAMqC,gBAAgB,GAAGf,WAAW,CAClCgB,SAAS,CAAC,UAAC3D,GAAD,EAAiB;IAAA;IACzB,IAAI,CAACA,GAAL,EAAU;MACRqD,gBAAgB;MAChB;IACD;IAEDhB,cAAc,CAAC,UAACuB,SAAD;MAAA,oBAAqBA,SAArB;QAAgC3B,OAAO,EAAE;MAAzC;IAAA,CAAD,CAAd;IAEA,IAAI4B,UAAkE,GACpE,EADF;IAGA,IAAI;MACFA,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWP,cAAc,CAACQ,OAAf,CAAuB3C,QAAvB,CAAoC,QAA/C,CAAb;IACD,CAFD,CAEE,OAAO8B,KAAP,EAAc;IAAA;IAIhB,IAAIhC,KAAJ,EAAW;MACT0C,UAAU,GAAGI,MAAM,CAACC,IAAP,CAAYL,UAAZ,CAAwBM,OAAxB,CACX,UAACC,GAAD,EAAyBb,GAAzB,EAAiC;QAC/B,IAAIM,UAAU,CAACN,GAAD,CAAV,CAAgBc,MAAhB,GAAyBC,IAAI,CAACC,GAAL,EAAzB,IAAuC,CAA3C,EACEH,GAAG,CAACb,GAAD,CAAH,GAAWM,UAAU,CAACN,GAAD,CAArB;QACF,OAAOa,GAAP;OAJS,EAMX,EANW,CAAb;MASA,IAAIP,UAAU,CAAC7D,GAAD,CAAd,EAAqB;QACnBqC,cAAc,CAAC;UACbJ,OAAO,EAAE,KADI;UAEbC,MAAM,EAAE,IAFK;UAGbC,IAAI,EAAE0B,UAAU,CAAC7D,GAAD,CAAV,CAAgBmC;QAHT,CAAD,CAAd;QAKA;MACD;IACF;IAED,uBAAK,CAAChC,OAAN,oCAAeqE,mBAAf,CACOjC,8BAAiB,CAACpC,OADzB;MACkCsE,KAAK,EAAEzE;IADzC,IAEE,UAACmC,IAAD,EAA4BD,MAA5B,EAA+C;MAC7CG,cAAc,CAAC;QAAEJ,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAANA,MAAlB;QAA0BC,IAAI,EAAEA,IAAI,IAAI;MAAxC,CAAD,CAAd;MAEA,IAAIhB,KAAK,IAAIe,MAAM,KAAK,IAAxB,EAA8B;QAC5B2B,UAAU,CAAC7D,GAAD,CAAV,GAAkB;UAChBmC,IAAI,EAAEA,IADU;UAEhBkC,MAAM,EAAEC,IAAI,CAACC,GAAL,KAAapD,KAAK,GAAG;SAF/B;QAKA,IAAI;UACFqC,cAAc,CAACkB,OAAf,CAAuBrD,QAAvB,EAAiCyC,IAAI,CAACa,SAAL,CAAed,UAAf,CAAjC;QACD,CAFD,CAEE,OAAOV,KAAP,EAAc;QAAA;MAGjB;KAhBL;EAmBD,CAxDQ,EAwDNlC,QAxDM,CADyB,EA0DlC,CAACE,KAAD,EAAQE,QAAR,EAAkBgC,gBAAlB,EAAoCd,iBAApC,CA1DkC,CAApC;EA6DA,IAAMqC,QAAkB,GAAGjC,WAAW,CACpC,UAAC3C,GAAD,EAAM6E,eAAN,EAAiC;IAAA,IAA3BA,eAA2B;MAA3BA,eAA2B,GAAT,IAAS;IAAA;IAC/B7C,MAAM,CAAChC,GAAD,CAAN;IACA,IAAIsC,KAAK,CAACnC,OAAN,IAAiB0E,eAArB,EAAsCnB,gBAAgB,CAAC1D,GAAD,CAAhB;EACvC,CAJmC,EAKpC,CAAC0D,gBAAD,CALoC,CAAtC;EAQAoB,SAAS,CAAC,YAAM;IACd,IAAI,CAACnD,WAAL,EAAkB,OAAO;MAAA,OAAM,IAAN;KAAP;IAElB,eAAmBiB,MAAnB;MAAQC,MAAR,YAAQA,MAAR;IAEA,IAAI,CAACJ,aAAa,CAACtC,OAAf,IAA0B,EAAC0C,MAAD,IAACA,cAAM,CAAEI,IAAT,CAA1B,IAA2C1B,YAA/C,EAA6D;MAC1DqB,MAAD,CAAgBrB,YAAhB,IAAgCmB,IAAhC;IACD,CAFD,MAEO;MACLA,IAAI;IACL;IAED,OAAO,YAAM;MACX;MACA,IAAKE,MAAD,CAAgBrB,YAAhB,CAAJ,EAAmC,OAAQqB,MAAD,CAAgBrB,YAAhB,CAAP;KAFrC;GAXO,EAeN,CAACA,YAAD,EAAekB,aAAf,EAA8BC,IAA9B,EAAoCf,WAApC,CAfM,CAAT;EAiBA,OAAO;IACLE,KAAK,EAALA,KADK;IAELE,KAAK,EAALA,KAFK;IAGLK,WAAW,EAAXA,WAHK;IAILwC,QAAQ,EAARA,QAJK;IAKLvB,gBAAgB,EAAhBA,gBALK;IAMLC,UAAU,EAAVA,UANK;IAOLZ,IAAI,EAAJA;GAPF;AASD;;AC/LD;AAQO,IAAMqC,UAAU,GACrB,+GADK;IAGMC,UAAU,GAAG,SAAbA,UAAa,CAACzE,IAAD,EAA8B;EACtD,IAAM0E,QAAQ,GAAG,IAAIrC,MAAM,CAACC,MAAP,CAAcI,IAAd,CAAmBiC,QAAvB,EAAjB;EAEA,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtCJ,QAAQ,CAACK,OAAT,CAAiB/E,IAAjB,EAAuB,UAACgF,OAAD,EAAUrD,MAAV,EAAqB;MAC1C,IAAIA,MAAM,KAAK,IAAf,EAAqBmD,MAAM,CAACnD,MAAD,CAAN;MACrB,IAAI,CAAC3B,IAAI,CAACiF,OAAN,IAAiBjF,IAAI,CAACkF,qBAA1B,EAAiD;QAC/CvC,OAAO,CAACC,KAAR,CAAc4B,UAAd;QACAK,OAAO,CAACG,OAAD,CAAP;MACD;MACDH,OAAO,CAACG,OAAD,CAAP;KANF;EAQD,CATM,CAAP;AAUD;IAIYG,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAAmC;EAC1D,4BAAqBA,MAAM,CAACC,QAAP,CAAgBC,QAArC;IAAQC,GAAR,yBAAQA,GAAR;IAAaC,GAAb,yBAAaA,GAAb;EACA,OAAO;IAAED,GAAG,EAAEA,GAAG,EAAV;IAAcC,GAAG,EAAEA,GAAG;GAA7B;AACD;AAIM,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBL,MADwB,EAExBM,YAFwB,EAGZ;EACZ,IAAMC,QAAQ,GAAGP,MAAM,CAACQ,kBAAP,CAA0BC,IAA1B,CAA+B;IAAA,IAAGC,KAAH,QAAGA,KAAH;IAAA,OAC9CA,KAAK,CAACC,QAAN,CAAe,aAAf,CAD8C;EAAA,CAA/B,CAAjB;EAIA,IAAI,CAACJ,QAAL,EAAe,OAAOK,SAAP;EAEf,OAAON,YAAY,GAAGC,QAAQ,CAACM,UAAZ,GAAyBN,QAAQ,CAACO,SAArD;AACD;AAMM,IAAMC,aAAa,GACxB,4IADK;IAGMC,UAAU,GAAG,SAAbA,UAAa,CAACpG,IAAD,EAAyC;EACjE,IAAMqG,aAAa,GAAG,IAAIhE,MAAM,CAACC,MAAP,CAAcI,IAAd,CAAmBD,MAAnB,CAA0B4D,aAA9B,CACpBC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CADoB,CAAtB;EAIA,IAAI,CAACvG,IAAI,CAACwG,OAAV,EAAmB;IACjB7D,OAAO,CAACC,KAAR,CAAcuD,aAAd;IACA,OAAOvB,OAAO,CAACE,MAAR,CAAeqB,aAAf,CAAP;EACD;EAED,OAAO,IAAIvB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACtCuB,aAAa,CAACD,UAAd,CAAyBpG,IAAzB,EAA+B,UAACgF,OAAD,EAAUrD,MAAV,EAAqB;MAClD,IAAIA,MAAM,KAAK,IAAf,EAAqBmD,MAAM,CAACnD,MAAD,CAAN;MACrBkD,OAAO,CAACG,OAAD,CAAP;KAFF;EAID,CALM,CAAP;AAMD","names":["val","ref","useRef","current","fn","delay","timer","args","clearTimeout","setTimeout","apply","_this","loadApiErr","usePlacesAutocomplete","_temp","requestOptions","_ref$debounce","debounce","_ref$cache","cache","_ref$cacheKey","cacheKey","googleMaps","callbackName","_ref$defaultValue","defaultValue","_ref$initOnMount","initOnMount","useState","ready","setReady","value","setVal","loading","status","data","suggestions","setSuggestions","asRef","requestOptionsRef","useLatest","googleMapsRef","init","useCallback","window","google","gMaps","placesLib","places","maps","console","error","AutocompleteService","clearSuggestions","clearCache","key","sessionStorage","removeItem","fetchPredictions","_debounce","prevState","cachedData","JSON","parse","getItem","Object","keys","reduce","acc","maxAge","Date","now","getPlacePredictions","input","setItem","stringify","setValue","shouldFetchData","useEffect","geocodeErr","getGeocode","geocoder","Geocoder","Promise","resolve","reject","geocode","results","address","componentRestrictions","getLatLng","result","geometry","location","lat","lng","getZipCode","useShortName","foundZip","address_components","find","types","includes","undefined","short_name","long_name","getDetailsErr","getDetails","PlacesService","document","createElement","placeId"],"sources":["C:\\Users\\sotor\\OneDrive\\Desktop\\NYU\\Fifth Year\\Collaborating Remotely Build Software from Anywhere\\projects\\WeatherApp\\node_modules\\use-places-autocomplete\\src\\useLatest.ts","C:\\Users\\sotor\\OneDrive\\Desktop\\NYU\\Fifth Year\\Collaborating Remotely Build Software from Anywhere\\projects\\WeatherApp\\node_modules\\use-places-autocomplete\\src\\debounce.ts","C:\\Users\\sotor\\OneDrive\\Desktop\\NYU\\Fifth Year\\Collaborating Remotely Build Software from Anywhere\\projects\\WeatherApp\\node_modules\\use-places-autocomplete\\src\\usePlacesAutocomplete.ts","C:\\Users\\sotor\\OneDrive\\Desktop\\NYU\\Fifth Year\\Collaborating Remotely Build Software from Anywhere\\projects\\WeatherApp\\node_modules\\use-places-autocomplete\\src\\utils.ts"],"sourcesContent":["import type { RefObject } from \"react\";\nimport { useRef } from \"react\";\n\nexport default <T>(val: T): RefObject<T> => {\n  const ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n","export default <F extends (...args: any[]) => void>(\n  fn: F,\n  delay: number\n): ((this: ThisParameterType<F>, ...args: Parameters<F>) => void) => {\n  let timer: ReturnType<typeof setTimeout> | null;\n\n  // eslint-disable-next-line func-names\n  return function (this: ThisParameterType<F>, ...args: Parameters<F>) {\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    timer = setTimeout(() => fn.apply(this, args), delay);\n  };\n};\n","import { useState, useRef, useCallback, useEffect } from \"react\";\n\nimport useLatest from \"./useLatest\";\nimport _debounce from \"./debounce\";\n\nexport interface HookArgs {\n  requestOptions?: Omit<google.maps.places.AutocompletionRequest, \"input\">;\n  debounce?: number;\n  cache?: number | false;\n  cacheKey?: string;\n  googleMaps?: any;\n  callbackName?: string;\n  defaultValue?: string;\n  initOnMount?: boolean;\n}\n\ntype Suggestion = google.maps.places.AutocompletePrediction;\n\ntype Status = `${google.maps.places.PlacesServiceStatus}` | \"\";\n\ninterface Suggestions {\n  readonly loading: boolean;\n  readonly status: Status;\n  data: Suggestion[];\n}\n\ninterface SetValue {\n  (val: string, shouldFetchData?: boolean): void;\n}\n\ninterface HookReturn {\n  ready: boolean;\n  value: string;\n  suggestions: Suggestions;\n  setValue: SetValue;\n  clearSuggestions: () => void;\n  clearCache: (key?: string) => void;\n  init: () => void;\n}\n\nexport const loadApiErr =\n  \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\n\nconst usePlacesAutocomplete = ({\n  requestOptions,\n  debounce = 200,\n  cache = 24 * 60 * 60,\n  cacheKey = \"upa\",\n  googleMaps,\n  callbackName,\n  defaultValue = \"\",\n  initOnMount = true,\n}: HookArgs = {}): HookReturn => {\n  const [ready, setReady] = useState(false);\n  const [value, setVal] = useState(defaultValue);\n  const [suggestions, setSuggestions] = useState<Suggestions>({\n    loading: false,\n    status: \"\",\n    data: [],\n  });\n  const asRef = useRef<google.maps.places.AutocompleteService>();\n  const requestOptionsRef = useLatest(requestOptions);\n  const googleMapsRef = useLatest(googleMaps);\n\n  const init = useCallback(() => {\n    if (asRef.current) return;\n\n    const { google } = window;\n    const { current: gMaps } = googleMapsRef;\n    const placesLib = gMaps?.places || google?.maps?.places;\n\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, [googleMapsRef]);\n\n  const clearSuggestions = useCallback(() => {\n    setSuggestions({ loading: false, status: \"\", data: [] });\n  }, []);\n\n  const clearCache = useCallback(\n    (key = cacheKey) => {\n      try {\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        // Skip exception\n      }\n    },\n    [cacheKey]\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const fetchPredictions = useCallback(\n    _debounce((val: string) => {\n      if (!val) {\n        clearSuggestions();\n        return;\n      }\n\n      setSuggestions((prevState) => ({ ...prevState, loading: true }));\n\n      let cachedData: Record<string, { data: Suggestion[]; maxAge: number }> =\n        {};\n\n      try {\n        cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || \"{}\");\n      } catch (error) {\n        // Skip exception\n      }\n\n      if (cache) {\n        cachedData = Object.keys(cachedData).reduce(\n          (acc: typeof cachedData, key) => {\n            if (cachedData[key].maxAge - Date.now() >= 0)\n              acc[key] = cachedData[key];\n            return acc;\n          },\n          {}\n        );\n\n        if (cachedData[val]) {\n          setSuggestions({\n            loading: false,\n            status: \"OK\",\n            data: cachedData[val].data,\n          });\n          return;\n        }\n      }\n\n      asRef.current?.getPlacePredictions(\n        { ...requestOptionsRef.current, input: val },\n        (data: Suggestion[] | null, status: Status) => {\n          setSuggestions({ loading: false, status, data: data || [] });\n\n          if (cache && status === \"OK\") {\n            cachedData[val] = {\n              data: data as Suggestion[],\n              maxAge: Date.now() + cache * 1000,\n            };\n\n            try {\n              sessionStorage.setItem(cacheKey, JSON.stringify(cachedData));\n            } catch (error) {\n              // Skip exception\n            }\n          }\n        }\n      );\n    }, debounce),\n    [cache, cacheKey, clearSuggestions, requestOptionsRef]\n  );\n\n  const setValue: SetValue = useCallback(\n    (val, shouldFetchData = true) => {\n      setVal(val);\n      if (asRef.current && shouldFetchData) fetchPredictions(val);\n    },\n    [fetchPredictions]\n  );\n\n  useEffect(() => {\n    if (!initOnMount) return () => null;\n\n    const { google } = window;\n\n    if (!googleMapsRef.current && !google?.maps && callbackName) {\n      (window as any)[callbackName] = init;\n    } else {\n      init();\n    }\n\n    return () => {\n      // @ts-ignore\n      if ((window as any)[callbackName]) delete (window as any)[callbackName];\n    };\n  }, [callbackName, googleMapsRef, init, initOnMount]);\n\n  return {\n    ready,\n    value,\n    suggestions,\n    setValue,\n    clearSuggestions,\n    clearCache,\n    init,\n  };\n};\n\nexport default usePlacesAutocomplete;\n","/* eslint-disable compat/compat */\n\ntype GeoArgs = google.maps.GeocoderRequest;\n\ntype GeocodeResult = google.maps.GeocoderResult;\n\ntype GeoReturn = Promise<GeocodeResult[] | null>;\n\nexport const geocodeErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\n\nexport const getGeocode = (args: GeoArgs): GeoReturn => {\n  const geocoder = new window.google.maps.Geocoder();\n\n  return new Promise((resolve, reject) => {\n    geocoder.geocode(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n      resolve(results);\n    });\n  });\n};\n\ntype LatLng = { lat: number; lng: number };\n\nexport const getLatLng = (result: GeocodeResult): LatLng => {\n  const { lat, lng } = result.geometry.location;\n  return { lat: lat(), lng: lng() };\n};\n\ntype ZipCode = string | undefined;\n\nexport const getZipCode = (\n  result: GeocodeResult,\n  useShortName: false\n): ZipCode => {\n  const foundZip = result.address_components.find(({ types }) =>\n    types.includes(\"postal_code\")\n  );\n\n  if (!foundZip) return undefined;\n\n  return useShortName ? foundZip.short_name : foundZip.long_name;\n};\n\ntype GetDetailsArgs = google.maps.places.PlaceDetailsRequest;\n\ntype DetailsResult = Promise<google.maps.places.PlaceResult | null>;\n\nexport const getDetailsErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\n\nexport const getDetails = (args: GetDetailsArgs): DetailsResult => {\n  const PlacesService = new window.google.maps.places.PlacesService(\n    document.createElement(\"div\")\n  );\n\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n\n  return new Promise((resolve, reject) => {\n    PlacesService.getDetails(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}